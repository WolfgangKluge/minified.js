<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>.on() - Minified.js</title>
	<section>reference</section>
	<externalCss>../css/reference.css</externalCss>
	<main><![CDATA[
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-on">.on()</a></h2>
<div class="summary">Registers the function as event handler for all items in the list.</div>

<h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">on(names, eventHandler)</div>
<div class="syntax">on(names, customFunc, args)</div>
<div class="syntax">on(names, customFunc, fThis, args)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="on_names" class=""><a name="on_names"><var>names</var></a></dt>
<dd class="">the space-separated names of the events to register for, e.g. 'click'. Case-sensitive. The 'on' prefix in front of
the name must not used. You can register the handler for more than one event by specifying several
space-separated event names. If the name is prefixed
with '|' (pipe), the handler's return value is ignored and the event will be passed through the event's default actions will
be executed by the browser.</dd>
<dt id="on_eventHandler" class=""><a name="on_eventHandler"><var>eventHandler</var></a></dt>
<dd class="">the callback <code>function(event, index, selectedIndex)</code> to invoke when the event has been triggered:
<dl>
<dt>event</dt><dd>The original DOM event object.</dd>
<dt>index</dt><dd>The index of the target object in the <a href='list.html'>Minified list</a> .</dd>
<dt class="returnValue">(callback return value)</dt><dd>Unless the handler returns <var>true</var>
or the event name is prefixed by '|', all further processing of the event will be
stopped and event bubbling will be disabled.</dd>
</dl>
'this' is set to the target element that caused the event (the same as <var>event.target</var>).</dd>
<dt id="on_customFunc" class=""><a name="on_customFunc"><var>customFunc</var></a></dt>
<dd class="">a function to be called instead of a regular event handler with the arguments given in <var>args</var>
and optionally the 'this' context given using <var>fThis</var>.</dd>
<dt id="on_fThis" class=""><a name="on_fThis"><var>fThis (optional)</var></a></dt>
<dd class="">an value for 'this' in the custom callback, as alternative to the event target</dd>
<dt id="on_args" class=""><a name="on_args"><var>args (optional)</var></a></dt>
<dd class="">an array of arguments to pass to the custom callback function instead of the event objects.
If you pass custom arguments, the return value of the handler will always be ignored.</dd>
<dt id="on_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2"><a name="on_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2">the list</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Registers the function as event handler for all items in the list.</p><p>By default, Minified cancels event propagation and the element's default behaviour for all elements that have an event handler.
You can override this by prefixing the event name with a '|' or by returning a 'true' value in the handler, which will reinstate
the original JavaScript behaviour.</p><p>Handlers are called with the original event object as first argument, the index of the source element in the
list as second argument and 'this' set to the source element of the event (e.g. the button that has been clicked).</p><p>Instead of the event objects, you can also pass an array of arguments and a new value for 'this' to the callback.
When you pass arguments, the handler's return value is always ignored and the event with unnamed prefixes
will always be cancelled.</p><p>Event handlers can be unregistered using <code><a href='off.html'>$.off()</a></code>.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Adds a handler to all divs which paints the div background color to red when clicked.
<pre>
$('div').on('click', function() {
   this.style.backgroundColor = 'red';    // 'this' contains the element that caused the event
});
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Registers a handler to call a method setStatus('running') using an inline function:
<pre>
$('#myButton').on('click', function() {
   myObject.setStatus('running');
});
</pre>
The previous example can bere written like this, using <var>on()</var>'s <var>args</var> and <var>fThis</var> parameters:
<pre>
$('#myButton').on('click', myObject.setStatus, myObject, ['running']);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Adds two handlers on an input field. The event names are prefixed with '|' and thus keep their original behaviour:
<pre>
$('#myInput').on('|keypress |keydown', function() {
   // do something
});
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Adds listeners for all clicks on
<pre>
$('#table').on('change', 'tr', function(event, index, selectedIndex) {
   alert("Click on table row number: " + selectedIndex);
});
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="wait.html">$.wait()</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="is.html">.is()</a>
</li><li><a href="length.html">.length</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="onover.html">.onOver()</a>
</li><li><a href="only.html">.only()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="select.html">.select()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="text.html">.text()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="trav.html">.trav()</a>
</li><li><a href="trigger.html">.trigger()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="M.html">M</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promise.html">Promise</a>
</li><li><a href="always.html">promise.always()</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="then.html">promise.then()</a>
</li><li><a href="require.html">require()</a>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

]]></main>
</page>
