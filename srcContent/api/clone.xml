<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>.clone() - Minified.js</title>
	<section>reference</section>
	<externalCss>../css/reference.css</externalCss>
	<main><![CDATA[
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-clone">.clone()</a></h2>
<div class="summary">Creates a Minified list of strings and Element Factories that return clones of the list's HTML elements.</div>

<h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">list.clone()</div>
<div class="syntax">list.clone(onCreate)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="clone_onCreate" class=""><a name="clone_onCreate"><var>onCreate (optional)</var></a></dt>
<dd class="">A <code>function(elementList)</code> that will be called for each top-level element created by the Element
Factory:
<dl><dt>elementList</dt><dd>The newly created element wrapped in a Minified list. </dd></dl>
The function's return value will be ignored.
The callback allows you, for example, to add event handlers to the element using <code><a href='on.html'>on()</a></code>.
Please note that the callback will be not be called for cloned text nodes. If you clone
more than one element, <var>onCreate</var> will be invoked for each element.</dd>
<dt id="clone_RETURN" class="returnValue inSyntax0 inSyntax1"><a name="clone_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1">the list of Element Factory functions and strings to create clones</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Creates a <a href='list.html'>Minified list</a> of strings and Element Factories that return clones of the list's HTML elements. An Element Factory is a function
that creates a Minified list of fresh DOM nodes. You can pass the list to <code><a href='add.html'>add()</a></code>, <code><a href='fill.html'>fill()</a></code> or similar functions to re-create the cloned nodes.</p><p><var>clone()</var> is very limited in what it will clone. Only elements, their attributes, text nodes and CDATA will be cloned.
Modifications of the elements, such as event handlers, will not be cloned.</p><p>Please note that id attributes will be automatically skipped by the Element Factory. This allows you to address the element to clone by id
without having to worry about duplicate ids in the result.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Using the following HTML:
<pre>
&lt;div id="comments">
   &lt;div id="comment1">My comment.&lt;/div>
&lt;/div>
</pre>
Creating a clone factory:
<pre>
var myCloneFactory = $('#comment1').clone();
</pre>
Creating a clone and adding it below the existing one:
<pre>
$('#comments').add(myCloneFactory);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Creating an event handler for a clone:
<pre>
var buttonCloner = $('#myButton').clone(function(newButton) {
    newButton.on('click', function() { alert('Cloned button clicked'); });
});
$('#buttonContainer').add(buttonCloner);
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="is.html">.is()</a>
</li><li><a href="length.html">.length</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="onover.html">.onOver()</a>
</li><li><a href="only.html">.only()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="select.html">.select()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="text.html">.text()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="trav.html">.trav()</a>
</li><li><a href="trigger.html">.trigger()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="M.html">M</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promiseClass.html">Promise</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="then.html">promise.then()</a>
</li><li><a href="require.html">require()</a>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

]]></main>
</page>
