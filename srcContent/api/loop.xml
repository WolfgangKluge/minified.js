<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>$.loop() - Minified.js</title>
	<section>reference</section>
	<externalCss>../css/reference.css</externalCss>
	<main><![CDATA[
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-loop">$.loop()</a></h2>
<div class="summary">Runs an animation loop.</div>

<h4>Syntax</h4>
<div class="syntaxVariant">
<div class="syntax">$.loop(paintCallback)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="loop_paintCallback" class=""><a name="loop_paintCallback"><var>paintCallback</var></a></dt>
<dd class="">a callback <code>function(timestamp, stopFunc)</code> to invoke for painting. Parameters given to callback:
<dl>
<dt>timestamp</dt><dd>The number of miliseconds since animation start.</dd>
<dt>stop</dt><dd>Call this <code>function()</code> to stop the currently running animation.</dd>
</dl>
The callback's return value will be ignored.</dd>
<dt id="loop_RETURN" class="returnValue inSyntax0"><a name="loop_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0">a <code>function()</code> that stops the currently running animation. This is the same function that is also given to the callback.</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Runs an animation loop. The given callback method will be invoked repeatedly to create a new animation frame.
In modern browsers, <var>requestAnimationFrame</var> will be used to invoke the callback every time the browser is ready for a new
animation frame.
The exact frequency is determined by the browser and may vary depending on factors such as the time needed to
render the current page, the screen's framerate and whether the page is currently visible to the user.
In older browsers, the callback function will be invoked approximately every 33 milliseconds.</p><p>An animation loop runs indefinitely. To stop it, you have two options:
<ul><li><var>$.loop()</var> returns a <var>stop()</var> function. If you invoke it, the animation loops ends</li>
<li>The animation callback receives the same <var>stop()</var> function as second argument, so the callback can end the animation itself</li>
</ul></p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Animates a div by moving along in a circle.
<pre>
  var myDiv = $$('#myAnimatedDiv');
  var rotationsPerMs = 1000;                           // one rotation per second
  var radius = 100;
  var d = 3000;                                        // duration in ms
  $.loop(function(t, stopFunc) {
    if (t > d) {                                       // time is up: call stopFunc()!
      stopFunc();
      return;
    }</p><p>    var a = 2 * Math.PI * t / rotationsPerMs           // angular position
    myDiv.style.left = (radius * Math.cos(a) + ' px';
    myDiv.style.top = (radius * Math.sin(a) + ' px';
  });
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="is.html">.is()</a>
</li><li><a href="length.html">.length</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="onover.html">.onOver()</a>
</li><li><a href="only.html">.only()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="select.html">.select()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="text.html">.text()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="trav.html">.trav()</a>
</li><li><a href="trigger.html">.trigger()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="M.html">M</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promiseClass.html">Promise</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="then.html">promise.then()</a>
</li><li><a href="require.html">require()</a>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

]]></main>
</page>
