<?xml version="1.0" encoding="UTF-8"?>
<!--
   Auto-generated using docbuilder.js. Do not edit manually. 
-->
<page xmlns="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
	<title>.trav() - Minified.js</title>
	<section>reference</section>
	<externalCss>../css/reference.css</externalCss>
	<main><![CDATA[
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-trav">.trav()</a></h2>
<div class="summary">Traverses each DOM node in the list using the given property, and creates a new list that includes each visited node,
optionally filtered by the given selector.</div>

<h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">trav(property)</div>
<div class="syntax">trav(property, selector)</div>
<div class="syntax">trav(property, selector, maxDepth)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="trav_selector" class=""><a name="trav_selector"><var>selector (optional)</var></a></dt>
<dd class="">any selector valid for #<code><a href='dollar.html'>$()</a></code>, including CSS selectors and lists. Additionally you can
a <code>function(node)</code> returning <var>true</var> for those nodes that are approved.
Selectors are optimized for '*', '.classname', 'tagname' and 'tagname.classname'. The performance for other selectors
is relative to the number of matches for the selector in the document. Default is '*', which includes all elements
(but no other nodes such as text nodes).</dd>
<dt id="trav_maxDepth" class=""><a name="trav_maxDepth"><var>maxDepth (optional)</var></a></dt>
<dd class="">the maximum number of steps to traverse. Defaults to unlimited.</dd>
<dt id="trav_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2"><a name="trav_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2">the new list containing all visited nodes. Nodes of the original list are not included, unless they
have been visited when traversing another node. Duplicate nodes will be automatically removed.</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Traverses each DOM node in the list using the given property, and creates a new list that includes each visited node,
optionally filtered by the given selector.</p><p><var>trav()</var> uses each element in the list and then traverses the DOM tree using that property until it finds null or
a DOM document, while adding all visited nodes that match the given selector to the result list. If no selector is given,
only elements will be added.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Returns a list of all parent nodes, direct and indirect:
<pre>
var parents = $('.myElements').trav('parentNode');
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Returns a list of all direct siblings of the original list:
<pre>
var parents = $('.sibs').trav('nextSibling', '*', 1);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Returns a list of all parent nodes, direct and indirect, that have the class 'specialParent':
<pre>
var parents = $('.myElements').trav('parentNode', '.specialParent');
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Returns a list of all direct parent nodes that are tables and have the class 'specialParent':
<pre>
var parents = $('.myElements').trav('parentNode', 'table.specialParent', 1);
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="wait.html">$.wait()</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="is.html">.is()</a>
</li><li><a href="length.html">.length</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="onover.html">.onOver()</a>
</li><li><a href="only.html">.only()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="select.html">.select()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="text.html">.text()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="trav.html">.trav()</a>
</li><li><a href="trigger.html">.trigger()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="M.html">M</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promise.html">Promise</a>
</li><li><a href="always.html">promise.always()</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="then.html">promise.then()</a>
</li><li><a href="require.html">require()</a>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

]]></main>
</page>
