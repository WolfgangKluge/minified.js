<?xml version="1.0" encoding="UTF-8"?>
<page:page xmlns:page="http://tjansen.de/minifiedPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://tjansen.de/minifiedPage ../schemas/page.xsd ">
  <page:title>How to... Common Minified Tasks</page:title>
  <page:section>docs</page:section>
  <page:externalCss>../css/doc.css</page:externalCss>
  <page:main><![CDATA[<div>
  <h1>How to... Common Minified Tasks</h1>

<h2>Overview</h2>
<ul>
<li><a href="#select">Work with Selectors and Lists</a><ul>
 <li><a href="#select_children">Find Elements</a></li>
 <li><a href="#select_allchildren">Find All Child Elements</a></li>
 <li><a href="#select_childnodes">Find Child Nodes</a></li>
 <li><a href="#select_otherchildren">Find Every Second Element</a></li>
 <li><a href="#select_combinechildren">Combine Lists</a></li>
 <li><a href="#select_findparent">Find a Specific Parent</a></li>
 <li><a href="#select_checkparent">Check Whether an Element is a Parent</a></li>
 <li><a href="#select_sibling">Get an Element's Next Sibling</a></li>
 <li><a href="#select_extend">Extend Minified Lists with New Methods</a></li>
</ul></li>
<li><a href="#html">Modify HTML Structure</a><ul>
 <li><a href="#html_text">Set Text Content</a></li>
 <li><a href="#html_readtext">Read Text Content</a></li>
 <li><a href="#html_innerhtml">Set InnerHTML</a></li>
 <li><a href="#html_addhtml">Append HTML</a></li>
 <li><a href="#html_create">Create HTML Elements</a></li>
 <li><a href="#html_add">Add HTML Elements or Text</a></li>
 <li><a href="#html_replace">Replace HTML Elements</a></li>
 <li><a href="#html_remove">Remove HTML Elements or Nodes</a></li>
 <li><a href="#html_removechildren">Remove Children of HTML Elements</a></li>
 <li><a href="#html_attr">Set and Read Attributes</a></li>
 <li><a href="#html_clone">Clone Elements</a></li>
</ul></li>
<li><a href="#style">Modify HTML Styles</a><ul>
 <li><a href="#style_classes">Add / Remove / Toggle CSS Classes</a></li>
 <li><a href="#style_hasclass">Check for CSS Classes</a></li>
 <li><a href="#style_set">Set and Read CSS Styles</a></li>
 <li><a href="#style_prop">Set and Read Properties</a></li>
</ul></li>
<li><a href="#anim">Animation</a><ul>
 <li><a href="#anim_anim">Animate Styles and Properties</a></li>
 <li><a href="#anim_chain">Chain Animation Steps</a></li>
 <li><a href="#anim_toggle">Toggle Styles and Properties</a></li>
 <li><a href="#anim_fade">Fade in / Fade Out (Animation)</a></li>
 <li><a href="#anim_slide">Slide in / Slide Out (Animation)</a></li>
 <li><a href="#anim_loop">Create Complex Animations (Loop)</a></li>
</ul></li>
<li><a href="#event">Events</a><ul>
 <li><a href="#event_events">Register / Unregister Event Handlers</a></li>
 <li><a href="#event_onover">Register for Mouseover Events</a></li>
 <li><a href="#event_selector">Select Bubbled Events (Live/Delegates Events)</a></li>
 <li><a href="#event_trigger">Trigger an Event</a></li>
 <li><a href="#event_custom">Create Custom Events</a></li>
</ul></li>
<li><a href="#data">Forms and Data</a><ul>
 <li><a href="#data_post">Do HTTP Requests (AJAX / XHR)</a></li>
 <li><a href="#data_values">Read and Submit a Form</a></li>
 <li><a href="#data_json">Use JSON</a></li>
 <li><a href="#data_cookie">Read / Write / Delete Cookies</a></li>
</ul></li>
<li><a href="#something_missing">Missing Something?</a></li>
</ul>


<h2><a name="select">Work with Selectors and Lists</a></h2>
<h3><a name="select_children">Find Elements</a></h3>
<p>
Creating a list containing only the element with the id 'a':
<pre>var l = $('#a');</pre>
Creating a list containing only the element with the class 'b':
<pre>var l = $('.b');</pre>
You can use all valid CSS1 selectors with <var>$()</var>. If you are using a build without IE7 support, 
all selectors supported by the browser are possible. 
</p>
<p>
API: <a href="/api/dollar.html">$()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/Vmr6z/">Selector</a>
</p>


<h3><a name="select_allchildren">Find All Child Elements</a></h3>
<p>
Finding all child elements of the element '#parent':
<pre>var l = $('*', '#parent', true);</pre>
The selector '*' is used to select all child elements. The third argument, if <var>true</var>, limits 
matches to direct children of the context nodes, instead of matching all descendants.<br/>
If you have an existing list, you can alternatively use <var>select()</var>:
<pre>var l = myList.select('*', true);</pre>
</p>
<p>
API: <a href="/api/dollar.html">$()</a>, <a href="/api/select.html">select()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/6BHAt/">Child Elements</a>
</p>


<h3><a name="select_childnodes">Find Child Nodes</a></h3>
<p>
Finding all child nodes of the element '#parent' (ALL nodes, not only the elements):
<pre>var l = $('#parent').collect(function(e) { return e.childNodes; });</pre>
Use <var>collect()</var> to create a list that's derived from another one. Minified has no 
direct support for getting child nodes, so you need to work with this helper function here.
</p>
<p>
API: <a href="/api/dollar.html">$()</a>, <a href="/api/collect.html">collect()</a>.<br/>
</p>


<h3><a name="select_otherchildren">Find Every Second Element</a></h3>
<p>
Finding every second &lt;li> element in '#parent':
<pre>var l = $('#parent li').filter(function(e, index) { return index % 2; });</pre>
The <var>filter()</var> function filters all elements that have an even index.
</p>
<p>
API: <a href="/api/dollar.html">$()</a>, <a href="/api/filter.html">filter()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/FXGce/">Filter</a>
</p>


<h3><a name="select_combinechildren">Combine Lists</a></h3>
<p>
<pre>var l = $([list1, list2]);</pre>
Use the selector function <var>$()</var> to combine lists. Nested lists will automatically be flattened and <var>null</var> elements 
will be removed.<br/>
You can also use the same syntax to add elements to the list:
<pre>var l2 = $([list1, element1, element2]);</pre>
Again, null elements will be automatically removed.
</p>
<p>
API: <a href="/api/dollar.html">$()</a>.<br/>
</p>


<h3><a name="select_findparent">Find a Specific Parent</a></h3>
<p>
<pre>var specialParent = $(child).trav('parentNode', '.special');</pre>
<var>trav()</var> allows you to select all nodes visited when traversing the specified property. Here, the 
property is 'parentNode' to traverse through all parent nodes. The second parameter is a selector that 
describes the element you are looking for. Only elements that match it will be in the resulting list.
</p>
<p>
API: <a href="/api/trav.html">trav()</a>.<br/>
</p>


<h3><a name="select_checkparent">Check Whether an Element is a Parent</a></h3>
<p>
<pre>var isParent = $(child).trav('parentNode', parent).length > 0;</pre>
The easiest way to find out whether an element is a parent node is to use <var>trav()</var> to travel up the parent chain.
The second parameter specifies that only <var>parent</var> matches. Thus you get an empty list if <var>parent</var> is not
the parent of <var>child</var>, or a list containing <var>parent</var> if it is.</p><p>
There is an alternative way to do this, by selecting all children of the parent, but it is much slower in most
situations:
<pre>var isParent = $('*', parent).find(child) != null;</pre>
</p>
<p>
API: <a href="/api/find.html">find()</a>, <a href="/api/trav.html">trav()</a>.<br/>
</p>


<h3><a name="select_sibling">Get an Element's Next Sibling</a></h3>
<p>
<pre>var siblings = myList.trav('nextSibling', 1);</pre>
You can use <var>trav()</var> to get the next subling for each element in the list and include them in a new list.
</p>
<p>
API: <a href="/api/trav.html">trav()</a>.<br/>
</p>


<h3><a name="select_extend">Extend Minified Lists with New Methods</a></h3>
<p>
<pre>MINI.M.prototype.children = function() { return $('*', this, true); };
var children = $('#parent').children();</pre>
Minified's internal class for lists is exposed as <var>MINI.M</var>. This allows you to add new methods or modify existing methods.
</p>
<p>
API: <a href="/api/M.html">MINI.M</a>.<br/>
</p>



<h2><a name="html">Modify HTML Structure</a></h2>
<h3><a name="html_text">Set Text Content</a></h3>
<p>
<pre>$('#myElement').fill("My new text");</pre>
The <var>fill()</var> method replaces an element's content with the given argument. If you pass a string,
it will replace the old content with a new text node. You can also use it to add other elements as new content.
</p>
<p>
API: <a href="/api/fill.html">fill()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/MKWTp/">fill()</a>
</p>

<h3><a name="html_readtext">Read Text Content</a></h3>
<p>
<pre>var textContent = $('#myElement').text();</pre>
The <var>text()</var> method reads the text content of an HTML node. If you specify a list of nodes, or an element
with nested elements, the content will be concatenated.
</p>
<p>
API: <a href="/api/text.html">text()</a>.<br/>
</p>

<h3><a name="html_innerhtml">Set InnerHTML</a></h3>
<p>
<pre>$('.display').set("innerHTML", "My <b>HTML</b>");</pre>
You can use <a href="/api/set.html">set()</a> to modify the <var>innerHTML</var> property of list members. 
If you only want to modify a single element, using the <var>innerHTML</var> property directly will be even easier:
<pre>$$('#myElement').innerHTML = "My <b>HTML</b>";</pre>
</p>
<p>Please note that is generally not a good idea to modify HTML using innerHTML and other string operations, especially
when handling user input or URL parameters. It is not only error prone, but can also lead to security issues. In most cases
it is better to <a href="#html_create">Create HTML Elements with EE()</a> instead.
<p>
<p>
API: <a href="/api/set.html">set()</a>, <a href="/api/dollardollar.html">$$()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/tzett/">InnerHTML</a>
</p>


<h3><a name="html_addhtml">Append HTML</a></h3>
<p>
<pre>$$('#myElement').innerHTML += "&lt;hr/>My Footer";</pre>
If you only need to modify a single element, you can add text directly to the <var>innerHTML</var> property.
This is not possible if your list has more than one element though. Then you need to write a <var>set()</var> callback like this:
<pre>$('.display').set("innerHTML", function(old) {return old + "My &lt;b>HTML&lt;/b>"; });</pre>
</p>
<p>Please note that is generally not a good idea to modify HTML using innerHTML and other string operations, especially
when handling user input or URL parameters. It is not only error prone, but can also lead to security issues. In most cases
it is better to <a href="#html_create">Create HTML Elements with EE()</a> instead.
<p>
API: <a href="/api/set.html">set()</a>, <a href="/api/dollardollar.html">$$()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/tzett/">InnerHTML</a>
</p>


<h3><a name="html_create">Create HTML Elements</a></h3>
<p>
<pre>var divFactory = EE('div');</pre>
Minified makes it easy to create <strong>element factories</strong>, simple functions that create HTML structures.
The line above creates a factory to return &lt;div> elements. To get the actual element, 
invoke the factory. It will return the new element wrapped in a <a href="/api/list.html">list</a>:
<pre>var newDiv = divFactory()[0];</pre>
Element factories can be used directly to add new elements:
<pre>$('.container').add(divFactory);          // add as last child
$('.container2').fill(divFactory);        // replace all children
$('.something').addFront(divFactory);     // add as first child
$('.something2').addBefore(divFactory);   // add as sibling in front of..
$('.something3').addAfter(divFactory);    // add as sibling after..
$('.oldElement').replace(divFactory);     // replace element</pre>

The elements created by <var>EE()</var> can receive an object map of <var>set()</var> arguments to set CSS classes, styles, attributes and properties.
You can also either pass a string to set a text node as child, add another element factory with children, or a list that mixes both:
<pre>$('.todo').add(EE('ol', {$: 'groceries'}, [
	EE('li', 'Milk'),
	EE('li', {$: 'important'}, 'Bread'},
	EE('li', ['2x ', EE('a', {'@href': 'http://en.wikipedia.org/wiki/Twinkie'}, 'Twinkies'})])
]));
</pre>

The previous snippet will add the following HTML to all elements with the class .todo:
<pre>&lt;ol class='groceries'>
	&lt;li>Milk&lt;/li>
	&lt;li class='important'>Bread&lt;/li>
	&lt;li>2x &lt;a href="http://en.wikipedia.org/wiki/Twinkie">Twinkies&lt;/a>&lt;/li>
&lt;/ol>
</pre>

</p>
<p>
API: <a href="/api/add.html">add()</a>, <a href="/api/addafter.html">addAfter()</a>, <a href="/api/addbefore.html">addBefore()</a>, 
<a href="/api/addfront.html">addFront()</a>, <a href="/api/ee.html">EE()</a>, <a href="/api/fill.html">fill()</a>, 
<a href="/api/replace.html">replace()</a>, <a href="/api/set.html">set()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/uRC8Y/">EE and add()</a>
</p>


<h3><a name="html_add">Add HTML Elements or Text</a></h3>
<p>
<pre>$('.container').add('Some text'); // add text node to all .container
$('.container').add(EE('br')); // add &lt;br> to all .container
$('.container').add(document.createElement('br'); // adds &lt;br> to <strong>first element only</strong>
$('.container').add(['Some text', EE('br'), 'More text']); // add text and elements at once
</pre>
Beside <var>add()</var>, you can use <var>fill()</var> to replace children or <var>addAfter()</var>, 
<var>addBefore()</var> and <var>addFront()</var> to position the elements relative to the list elements.
</p>
<p>
API: <a href="/api/add.html">add()</a>, <a href="/api/addafter.html">addAfter()</a>, <a href="/api/addbefore.html">addBefore()</a>, 
<a href="/api/addfront.html">addFront()</a>, <a href="/api/ee.html">EE()</a>, <a href="/api/fill.html">fill()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/uRC8Y/">EE and add()</a>
</p>


<h3><a name="html_replace">Replace HTML Elements</a></h3>
<p>
<pre>$('#oldElement').replace(EE('div', 'My new div'));</pre>
<var>replace()</var> replaces the elements of the list with the given text or elements. It supports the same arguments
as <var>set()</var>.<br/>
If you want to replace the children of an element, instead of the element itself, you can also use <var>fill()</var>:
<pre>$('#container').fill("New content.");</pre>
</p>
<p>
API: <a href="/api/add.html">add()</a>, <a href="/api/fill.html">fill()</a>, <a href="/api/ee.html">EE()</a>, 
<a href="/api/replace.html">replace()</a>.<br/>
</p>


<h3><a name="html_remove">Remove HTML Elements or Nodes</a></h3>
<p>
<pre>$('.oldStuff').remove();</pre>
Just use <var>remove()</var> to remove elements from the DOM tree.
</p>
<p>
API: <a href="/api/remove.html">remove()</a>.<br/>
</p>

<h3><a name="html_removechildren">Remove Children of HTML Elements</a></h3>
<p>
<pre>$('.container').fill();</pre>
Call <var>fill()</var> without arguments to remove all content of an element.
</p>
<p>
API: <a href="/api/fill.html">fill()</a>.<br/>
</p>

<h3><a name="html_attr">Get and Set Attributes</a></h3>
<p>
<pre>$('a.someLink').set({'@href': 'http://minifiedjs.com'});</pre>
Use <var>set()</var> with a '@'-prefixed name to set attributes. <var>get()</var> reads attributes with the same name syntax:
<pre>var link = $('a.someLink').get('@href');</pre>
For reading data attributes there's the special prefix '%' which makes it a bit shorter:
<pre>var link = $('#myDiv').get('%extra'); // same as get('@data-extra')</pre>
</p>
<p>
API: <a href="/api/get.html">get()</a>, <a href="/api/set.html">set()</a>.<br/>
</p>


<h3><a name="html_clone">Clone Elements</a></h3>
<p>
<pre>var createSheep = $('.sheep').clone();</pre>
<var>clone()</var> create an element factory that will create the cloned list with all elements, attributes and text nodes. You
can use the element factory with <var>add()</var> and its variants:
<pre>$('#destination').add(createSheep);</pre>
Or just call the factory to create new instances:
<pre>var clone = createSheep();</pre>
</p>
<p>
API: <a href="/api/add.html">add()</a>, <a href="/api/clone.html">clone()</a>, 
<a href="/api/ee.html">EE()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/vuyh9/">clone()</a>
</p>


<h2><a name="style">Modify HTML Styles</a></h2>
<h3><a name="style_classes">Add / Remove / Toggle CSS Classes</a></h3>
<p>
<pre>$('.myClass').set('-oldClass +newClass toggleClass');</pre>
If you call <var>set()</var> only with a string as argument, it
will modify the elements' CSS classes. Several classes can be listed, separated by spaces.
The prefix determines what to do: 
<ul><li>"-" removes the CSS class</li><li>"+" adds it</li><li>no prefix toggles</li></ul><br/>
You can also call <var>set()</var> with the name "$" to do the same. This can be useful to modify
several things at the same time:
<pre>$('.myClass').set({$: '-oldClass', $display: 'block');</pre>
</p><p>
Often it is simpler to create a toggle for CSS classes, as you can connect it directly to events:
<pre>var toggle = $('.myClass').toggle('toggleClass');
$('#toggleButton').on('click', toggle);
$('#onButton').on('click', toggle, [true]);
$('#offButton').on('click', toggle, [false]);</pre>
</p>
<p>
API: <a href="/api/set.html">set()</a>, <a href="/api/toggle.html">toggle()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/Un7QF/">CSS Classes</a>
</p>


<h3><a name="style_hasclass">Check for CSS Classes</a></h3>
<p>
<pre>var isMyclass = $('#elem').is('.myclass');</pre>
<var>is()</var> returns <var>true</var> if all list members match the given selector.
</p>
<p>
API: <a href="/api/is.html">is()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/ghPaC/">CSS Classes</a>
</p>


<h3><a name="style_set">Get and Set CSS Style</a></h3>
<p>
<pre>$('#someSpan').set({$color: '#ff0'});</pre>
Use <var>set()</var> with a '$'-prefixed name to set CSS styles. <var>get()</var> reads the effective CSS style of the first element
in the list:
<pre>var color = $('#someSpan').get('$color');</pre>
</p>
<p>
API: <a href="/api/get.html">get()</a>, <a href="/api/set.html">set()</a>.<br/>
</p>


<h3><a name="style_prop">Get and Set Properties</a></h3>
<p>
<pre>$('#someTextField').set({value: 'New text...'});</pre>
Use <var>set()</var> with a unprefixed name to set properties. <var>get()</var> reads properties of the first element
in the list:
<pre>var value = $('#someTextField').get('value');</pre>
</p>
<p>
API: <a href="/api/get.html">get()</a>, <a href="/api/set.html">set()</a>.<br/>
</p>


<h2><a name="anim">Animation</a></h2>

<h3><a name="anim_anim">Animate Styles and Properties</a></h3>
<p>
<pre>$('.moving').animate({$width: '100px'}, 750);</pre>
<var>animate()</var> shares the name/value syntax with <var>set()</var>, but will smoothly transition numbers and colors. You
can specify the duration of the animation as well as the interpolation algorithm to be used.
</p>
<p>
If you need to transition an object back and forth between two states, it is usually better to animate using <var>toggle()</var>
<pre>var myToggle = $('.moving').toggle({$width: '100px'}, {$width: '200px'}, 750);

$('#widthToggle').on('click', myToggle);
$('#width100').on('click', myToggle, [false]);
$('#width200').on('click', myToggle, [true]);
</pre>
<p>
API: <a href="/api/animate.html">animate()</a>, <a href="/api/set.html">set()</a>, 
<a href="/api/toggle.html">toggle()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/tqsCg/">Animation</a>, <a href="http://jsfiddle.net/tjansen/xw7nQ/">Toggle</a>
</p>


<h3><a name="anim_chain">Chain Animation Steps</a></h3>
<p>
<pre>
$('.colChanger').animate({$backgroundColor: '#f00'}, 750)
                     .then(function(list) {
				return $('.colChanger').animate({$backgroundColor: '#0f0'}, 750)
		     })
                     .then(function(list) {
				$('.colChanger').animate({$backgroundColor: '#000'}, 750)
		     });
</pre>
<var>animate()</var> returns a <a href="/api/promise.html">Promise</a> that can be used to 
chain <var>animate()</var> invocations, so that you can start another <var>animate()</var> when 
the previous animation ended.
</p>
<p>
API: <a href="/api/animate.html">animate()</a>, <a href="/api/promise.html">Promise</a>, 
<a href="/api/then.html">then()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/NrGnf/">Animation Chain</a>
</p>


<h3><a name="anim_toggle">Toggle Styles and Properties</a></h3>
<p>
<pre>var myToggle = $('.resizing).toggle({$width: '100px'}, {$width: '200px'}, 750);

$('#widthToggle').on('click', myToggle);
$('#width100').on('click', myToggle, [false]);
$('#width200').on('click', myToggle, [true]);
</pre>
Toggles are functions that can toggle the state of a list's elements between two sets of values. 
You can go to a specific state by calling the toggle with a boolean, or toggle between the states
by calling it either without arguments or with a non-boolean argument. Toggles are animated when you set a duration, but you
can also skip the duration to toggle instantly.
</p>
<p>
API: <a href="/api/toggle.html">toggle()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/xw7nQ/">Toggle</a>, 
<a href="http://jsfiddle.net/tjansen/USMfD/">Fade/Slide Toggle</a>
</p>


<h3><a name="anim_fade">Fade in / Fade Out (Animation)</a></h3>
<p>
<pre>$('.myElem1').animate({$$fade: 1}, 500); // fade in
$('.myElem2').animate({$$fade: 0}, 500); // fade out
var fadeToggle = $('.myElem3').toggle({$$fade: 0}, {$$fade: 1}, 500);
</pre>
Use the virtual property <var>$$fade</var> to fade elements in and out.
</p>
<p>
API: <a href="/api/animate.html">animate()</a>, <a href="/api/set.html">set()</a>, 
<a href="/api/toggle.html">toggle()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/USMfD/">Fade/Slide Toggle</a>
</p>


<h3><a name="anim_slide">Slide in / Slide Out (Animation)</a></h3>
<p>
<pre>$('.myElem1').animate({$$slide: 1}, 500); // slide in
$('.myElem2').animate({$$slide: 0}, 500); // slide out
var slideToggle = $('.myElem3').toggle({$$slide: 0}, {$$slide: 1}, 500);
</pre>
Use the virtual property <var>$$slide</var> to slide elements in and out.
</p>
<p>
API: <a href="/api/animate.html">animate()</a>, <a href="/api/set.html">set()</a>, 
<a href="/api/toggle.html">toggle()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/USMfD/">Fade/Slide Toggle</a>
</p>


<h3><a name="anim_loop">Create Complex Animations (Loop)</a></h3>
<p>
<pre>$.loop(function(t) {
	$('.swinging').set({$top: (100 + 50*Math.sin(2*Math.PI * t / 5000)) + 'px'});
});</pre>
For complex animations that can not be expressed with <var>animate()</var>, <var>$.loop()</var> allows you to
register a function that will be invoked at a browser-controlled frame-rate. It uses the browser's 
<var>requestAnimationFrame</var> function if available.
</p>
<p>
API: <a href="/api/animate.html">animate()</a>, <a href="/api/loop.html">loop()</a>, 
<a href="/api/set.html">set()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/Xu6R8/">Loop Animation</a>
</p>


<h2><a name="event">Data and Events</a></h2>
<h3><a name="event_events">Register / Unregister Event Handlers</a></h3>
<p>
<pre>function buttonHandler(e) { 
	window.alert('Button pressed. Unregister now.');
	$.off(buttonHandler);
}
$('#myButton').on('click', buttonHandler);</pre>
Use <var>on()</var> to register an event handler for one or more events. <var>$.off()</var> unregisters event handlers.<br/>
Please note that <var>on()</var> is a bit different than other libraries' event registration: by default, Minified will disable 
event forwarding and the event's default action. If you want to allow event processing, you must either prefix the event name with a
pipe ('|') or let the handler return <var>true</var>.
</p>
<p>
API: <a href="/api/on.html">on()</a>, <a href="/api/off.html">off()</a>.<br/>
</p>

<h3><a name="event_onover">Register for Mouseover Events</a></h3>
<p>
<pre>function mouseoverHandler(isOver, index) { 
	if (isOver)
		console.log('is over element ', index);
	else
		console.log('left element ', index);
}
$('.activeSpots').onOver(mouseoverHandler);</pre>
It is a bit difficult to set up mouseover events in a way that it works on all browsers, so Minified offers 
you <var>onOver()</var> as a convenient way to handle mouseover and mouseleave-like events. The handler is called with
<var>true</var> if the mouse enters the element, and <var>false</var> when it leaves. <var>onOver()</var> prevents flickering -
it is guaranteed that the handler is not called twice with the same value for the same element.<br/>
As a bonus, because of the way the event handler is called, you can pass a toggle directly to <var>onOver()</var>:
<pre>$('#mySpot').onOver($('#mySpot').toggle({$color: 'white'}, {$color: 'red'}));</pre>
</p><p>
API: <a href="/api/onover.html">onOver()</a>, <a href="/api/toggle.html">toggle()</a>.<br/>
</p>


<h3><a name="event_selector">Select Bubbled Events (Live/Delegates Events)</a></h3>
<p>
<pre>
$('#container').on('click', 'div.monitored', myHandler);</pre>
Using an extra selector you can make <var>on()</var> limit events to those that bubbled up from elements
described by the selector. This allows you to set up event handlers in parent elements and let events bubble up, 
so you need less (potentially resource-hungry) event handlers. Also, you may not need to add new event handlers 
when you add child elements to a monitored parent element, which is mostly useful if you work with <var>innerHTML</var>
to add child elements.
</p><p>
API: <a href="/api/on.html">on()</a>.<br/>
</p>


<h3><a name="event_trigger">Trigger an Event</a></h3>
<p>
<pre>$('#myElement').on('click', myHandler);
$('#myElement').trigger('click', {msg: 'Just triggered it')});</pre>
You can use <var>trigger()</var> to invoke any event handler previously registered using <var>on()</var>. The
handler(s) will receive <var>trigger()</var>'s second parameter as event object. <br/>
<var>trigger()</var> emulates event bubbling, but will not send a DOM
event to the browser and thus does not emulate the event default behaviour. 
</p><p>
API: <a href="/api/on.html">on()</a>, <a href="/api/trigger.html">trigger()</a>.<br/>
</p>


<h3><a name="event_custom">Create Custom Events</a></h3>
<p>
<pre>$('#myElement').on('myOwnEventType', myHandler);
$('#myElement').trigger('myOwnEventType', {msg: 'Just triggered it')});</pre>
You can create your own event type by just making up a event type name and register for it using <var>on()</var>. 
They can then be triggered using <var>trigger()</var>. 
</p><p>
API: <a href="/api/on.html">on()</a>, <a href="/api/trigger.html">trigger()</a>.<br/>
</p>



<h2><a name="data">Data and Events</a></h2>
<h3><a name="data_post">Do HTTP Requests (AJAX / XHR)</a></h3>
<p><pre>$.request('post', '/example/service', {param1: 'hello', param2: 5})
    .then(function success(result) {
    	$('#result').fill(result);
    })
    .error(function(status, statusText, responseText) {
		$('#result').fill('Got an error.');
	});;</pre>
<var>$.request()</var> executes HTTP requests asynchronously. You have to specify the method and URL to use, as well as data to send.
For GET requests the data is either a map of parameters or a string to append to the URL. 
For POST requests, it can either be a map of form parameters, a string or XML. The result  of the request is returned 
as a <a href="/api/promise.html">Promise</a>.
</p>
<p>
API: <a href="/api/request.html">request()</a>, <a href="/api/promise.html">Promise</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/ncQrp/">Request / JSON</a>
</p>


<h3><a name="data_values">Read and Send a Form</a></h3>
<p><pre>var result = $.request('post', '/example/service', $('#myForm').values());</pre>
<var>values()</var> reads a HTML form and returns its data in a format that it can be send using a 
POST request with <var>$.request()</var>. Unlike real form submission, the browser will not leave the page
when you use <var>values()</var>.
</p>
<p>
API: <a href="/api/request.html">request()</a>, <a href="/api/values.html">values()</a>.<br/>
</p>


<h3><a name="data_json">Use JSON</a></h3>
<p><pre>var jsonString = $.toJSON({a:1, b: 'test', c: [1, 2]});
var obj = $.parseJSON(jsonString);</pre>
<var>$.toJSON()</var> and <var>$.parseJSON()</var> convert between JSON strings and JavaScript structures. If you want to send
JSON in an HTTP request, just convert the JavaScript structure to a string using <var>$.toJSON()</var>. To evaluate a
JSON response, use <var>$.parseJSON()</var> for the conversion.
</p>
<p>
API: <a href="/api/parsejson.html">parseJSON()</a>, <a href="/api/tojson.html">toJSON()</a>, 
<a href="/api/request.html">request()</a>.<br/>
JSFiddle Example: <a href="http://jsfiddle.net/tjansen/ncQrp/">Request / JSON</a>
</p>


<h3><a name="data_cookie">Read / Write / Delete Cookies</a></h3>
<p><pre>$.setCookie('counter', (parseInt($.getCookie('counter')) || 0) + 1, 14); // 14 days valid 
</pre>
<var>$.getCookie()</var> and <var>$.setCookie()</var> allow you to read and write cookies. To delete a cookie, set an expiration date in the
past like this:
<pre>$.setCookie('numberOfVisits', '', -1);</pre>
</p>
<p>
API: <a href="/api/getcookie.html">getCookie()</a>, <a href="/api/setcookie.html">setCookie</a>.<br/>
</p>


<h3><a name="something_missing">Missing Something?</a></h3>
<p>Looking for something but can't find it here? Please write a mail to <a href="mailto:tim@tjansen.de">tim@tjansen.de</a> ('Minified' in the
subject to gets you past the spam filter).</p>

</div>
 ]]></page:main>

  
</page:page>